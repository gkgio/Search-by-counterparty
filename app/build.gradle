apply plugin: 'com.android.application'
apply plugin: 'realm-android'
apply plugin: 'io.fabric'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion
    defaultConfig {
        applicationId "com.gig.gio.search_by_counterparty"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        versionCode rootProject.versionCode
        versionName rootProject.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // DaData API Key
        buildConfigField "String", "API_KEY", "\"56154788262bcbf5f831b8e34ec3e768888b9ed2\""
    }

    signingConfigs {
        release {
            storeFile file("key-store.jks")
            storePassword "android-counterparty"
            keyAlias "Counterparty"
            keyPassword "android-counterparty"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }

        release {
            debuggable false
            ext.enableCrashlytics = true
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs'
    })
    implementation "com.android.support:appcompat-v7:${rootProject.supportVersion}"
    implementation "com.android.support:design:${rootProject.supportVersion}"
    implementation "com.android.support:recyclerview-v7:${rootProject.supportVersion}"
    implementation 'com.google.android.gms:play-services-location:11.6.0'
    implementation 'com.google.android.gms:play-services-maps:11.6.0'
    implementation 'com.google.maps.android:android-maps-utils:0.5'

    // dependency injection
    annotationProcessor "com.google.dagger:dagger-compiler:${rootProject.daggerVersion}"
    implementation "com.google.dagger:dagger:${rootProject.daggerVersion}"
    compileOnly 'org.glassfish:javax.annotation:10.0-b28'

    // rx
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.3'

    // rxbinding
    implementation "com.jakewharton.rxbinding2:rxbinding:${rootProject.rxBindingVersion}"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4:${rootProject.rxBindingVersion}"

    // retrofit
    implementation("com.squareup.retrofit2:retrofit:${rootProject.retrofitVersion}") {
        exclude module: 'okhttp'
    }
    implementation "com.squareup.retrofit2:converter-gson:${rootProject.retrofitVersion}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${rootProject.retrofitVersion}"

    // http client
    implementation "com.squareup.okhttp3:okhttp:${rootProject.httpClientVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${rootProject.httpClientVersion}"

    // gson
    implementation 'com.google.code.gson:gson:2.8.2'

    //crashlytics
    implementation('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true;
    }
    implementation('com.crashlytics.sdk.android:answers:1.4.0@aar') {
        transitive = true;
    }
}
apply plugin: 'com.google.gms.google-services'